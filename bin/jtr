#!/usr/bin/env bash

DEFAULT_DISK_DEVICE="/dev/dvd"
DEFAULT_DISK_EJECT="y"
DEFAULT_TMP_ROOT="/tmp"
DEFAULT_DISK_LABEL=""

DISK_DEVICE="${DISK_DEVICE:-$DEFAULT_DISK_DEVICE}"
DISK_EJECT="${DISK_EJECT:-$DEFAULT_DISK_EJECT}"
DISK_LABEL="${DISK_LABEL:-$DEFAULT_DISK_LABEL}"
OUTPUT_FILE="${OUTPUT_FILE:-}"
TMP_ROOT="${TMP_ROOT:-$DEFAULT_TMP_ROOT}"

function .usage() {
  (
    echo "usage: jtr [FLAGS] OUTPUT_FILE"
    echo ""
    echo "FLAGS:"
    echo "    -h|--help              Display this usage information."
    echo ""
    echo "    --no-eject             Disable ejecting the disk after rip completion."
    echo ""
    echo "    -d|--tmp-root TMP_ROOT The root directory to create temporary files in."
    echo "                           Defaults to ${DEFAULT_TMP_ROOT}."
    echo ""
    echo "    -i|--device DEVICE     Use the following device as the DVD source disk device."
    echo "                           Defaults to ${DEFAULT_DISK_DEVICE}."
    echo ""
    echo "    -l|--label LABEL       The DVD label to store. Defaults to detecting this from"
    echo "                           the disk dynamically."
    echo ""
    echo "ARGUMENTS:"
    echo "    OUTPUT_FILE            A path to a location on disk to save the output ISO file."
    echo ""
    echo "USAGE:"
    echo ""
    echo "For usage instructions, please see the man page at \`man jtr\`."
  ) >&2
  return 1
}

function .is_tty() { test -t 2 ; }

function .fg_clear()  { if .is_tty ; then echo -ne "\033[0m"    ; fi ; }
function .fg_cyan()   { if .is_tty ; then echo -ne "\033[1;36m" ; fi ; }
function .fg_green()  { if .is_tty ; then echo -ne "\033[1;32m" ; fi ; }
function .fg_purple() { if .is_tty ; then echo -ne "\033[1;35m" ; fi ; }
function .fg_red()    { if .is_tty ; then echo -ne "\033[1;31m" ; fi ; }
function .fg_yellow() { if .is_tty ; then echo -ne "\033[1;33m" ; fi ; }

function .trace() { .fg_purple ; .log "[TRACE]" $@ ; .fg_clear ; }
function .debug() { .fg_green  ; .log "[DEBUG]" $@ ; .fg_clear ; }
function .info()  { .fg_cyan   ; .log "[INFO ]" $@ ; .fg_clear ; }
function .warn()  { .fg_yellow ; .log "[WARN ]" $@ ; .fg_clear ; }
function .error() { .fg_red    ; .log "[ERROR]" $@ ; .fg_clear ; }

function .log() {
  echo "$@" >&2
}

function .is_dvd_present() {
  test -b "$DISK_DEVICE"
}

function .should_eject() {
  test "$DISK_EJECT" == "y"
}

function .execute() {
  # create a temporary working directory in the temp root with the givin template format
  workdir="$(mktemp -d -p "$TMP_ROOT" "jtr.XXXXXX")"

  # back up the DVD to the temporary working directory
  .info "Backing up DVD file contents to ${workdir}, this will take some time."

  if ! dvdbackup -M -i "$DISK_DEVICE" -o "$workdir" >/dev/null ; then
    .error "Unable to back up the DVD to disk via dvdbackup, cleaning up."
    rm -fr "${workdir}"
    exit 1
  fi

  if .should_eject ; then
    .debug "Ejecting the disk."
    # dgaf if eject doesn't work
    eject "${DISK_DEVICE}" || true
  fi

  # create an ISO image from the on-disk DVD contents
  dvd_root="$(find "${workdir}" -mindepth 1 -maxdepth 1 -type d | head -n 1)"

  if [ -z "$dvd_root" ]; then
    .error "dvdbackup was unable to rip the DVD to the filesystem, cleaning."
    rm -fr "${workdir}"
    exit 1
  fi

  .info "Creating an ISO image from the on-disk DVD contents."
  if ! genisoimage -quiet -dvd-video -V "$DISK_LABEL" -o "$OUTPUT_FILE" "$dvd_root" >/dev/null ; then
    .error "Unable to create an ISO-9660 image from the on-disk DVD contents, cleaning up."
    rm -fr "${workdir}"
    exit 1
  fi

  # clean up
  .info "ISO image created and stored at ${OUTPUT_FILE}, cleaning up."
  rm -fr "$workdir"
}

function .parse_opts() {
  local addtl_opts=()

  # parse out flags
  while [ $# -gt 0 ]; do
    arg="$1" && shift

    case "$arg" in
      -h|--help)
        .usage
        exit 1
        ;;

      --no-eject)
        DISK_EJECT=n
        ;;

      -d|--tmp-root)
        TMP_ROOT="$1" && shift
        ;;

      -i|--device)
        DISK_DEVICE="$1" && shift
        ;;

      -l|--label)
        DISK_LABEL="$1" && shift
        ;;

      *)
        if echo "$arg" | grep -qP '^[-]{1,2}' ; then
          .error "Unrecognized option: $arg"
          .usage
          exit 1
        else
          addtl_opts+=("${arg}")
        fi
        ;;
    esac
  done

  # parse the output file
  if [ ${#addtl_opts[@]} -ne 1 ]; then
    .error "There should be exactly one OUTPUT_FILE parameter passed."
    .usage
    exit 1
  fi

  OUTPUT_FILE="${addtl_opts[0]}"
}

function .validate_opts() {
  if [ -z "$OUTPUT_FILE" ]; then
    .error "Please specify OUTPUT_FILE as the last argument."
    .usage
    return 1
  fi

  if ! .is_dvd_present ; then
    .error "Disk device ${DISK_DEVICE} does not exist or is not a block device."
    return 1
  fi

  if [ ! -d "$TMP_ROOT" ]; then
    .error "Temporary root directory $TMP_ROOT does not exist."
    return 1
  fi

  if [ -z "$DISK_LABEL" ]; then
    DISK_LABEL="$(blkid -o value -s LABEL "$DISK_DEVICE")"
    .info "Detected disk label as '$DISK_LABEL'"
  fi

  if [ -z "$OUTPUT_FILE" ]; then
    .error "No output file specified."
    .usage
    return 1
  fi

  return 0
}

function .validate_deps() {
  if ! which dvdbackup &>/dev/null ; then
    .error "The dvdbackup binary does not exist or is not on the PATH."
    return 1
  fi

  if ! which genisoimage &>/dev/null ; then
    .error "The genisoimage binary does not exist or is not on the PATH."
    return 1
  fi

  if [ ! -d "/usr/share/libdvd-pkg" ]; then
    .warn "libdvd-pkg does not seem to be installed, this most likely means that it will not be possible to rip the disk."
  fi
}

function .main() {
  # parse and validate options
  .parse_opts $@
  .validate_opts

  # validate system dependencies
  .validate_deps

  # LET'S GO
  .execute
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  set -e
  .main $@
fi
